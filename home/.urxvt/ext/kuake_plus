#! perl

my $has_which = eval "use File::Which; 1";

sub on_start {
   my ($self) = @_;

   # TODO: Why is it failing to read the X resource?
   $self->{key} = $self->{argv}[0] || "F10";
   $self->{hide_on_lose_focus} = $self->x_resource('kuake.hideOnLoseFocus') || 1;
   $self->{toggle_focuses_if_visible} = $self->x_resource('kuake.toggleFocusesIfVisible') || 1;

   $self->{keysym} = $self->XStringToKeysym ($self->{key})
      or urxvt::fatal "cannot convert requested kuake wake-up key '$self->{key}' to keysym, unable to continue.\n";

   $self->{keycode} = $self->XKeysymToKeycode ($self->{keysym})
      or urxvt::fatal "cannot convert requested kuake wake-up key '$self->{key}' to keycode, unable to continue.\n";

   $self->{wmctrl_path} = $has_which ? which('wmctrl') : 0;

   # Grab both with and without NumLock
   $self->XGrabKey ($self->{keycode}, 0, $self->DefaultRootWindow);
   $self->XGrabKey ($self->{keycode}, 16, $self->DefaultRootWindow);

   $self->XUnmapWindow ($self->parent);

   $self->{unmap_me} = 1;

   print("T" . $self->x_resource('kuake.toggleFocusesIfVisible') . "," . $self->{toggle_focuses_if_visible} . "\n");
   ()
}

sub on_focus_out {
    my ($self) = @_;

    $self->XUnmapWindow($self->parent)
        if $self->{hide_on_lose_focus}
}

sub on_map_notify {
   my ($self) = @_;

   # suppress initial map event
   $self->XUnmapWindow ($self->parent)
      if delete $self->{unmap_me};

   if ($self->{wmctrl_path} and $self->mapped) {
      my $cmd = $self->{wmctrl_path} . " -i -b add,above,sticky -r " .
         int($self->parent);
      print($cmd . "\n");
      `$cmd`;
   }

   ()
}

sub on_root_event {
   my ($self, $event) = @_;

   return unless $event->{type} == urxvt::KeyPress && $event->{keycode} == $self->{keycode};

   # XXX: Is there any way to instruct URxvt to focus itself via Perl?
   # urxvtperl(3) doesn't even mention things like $term->XMapWindow.
   if ((not $self->focus) and $self->mapped and $self->{toggle_focuses_if_visible}) {
      if ($self->{wmctrl_path}) {
          my $cmd = $self->{wmctrl_path} . " -i -R " . int($self->parent);
          print($cmd . "\n");
         `$cmd`;
      } else {
         $self->XUnmapWindow ($self->parent);
         $self->XMapWindow ($self->parent);
      }
   } else {
      $self->mapped
        ? $self->XUnmapWindow ($self->parent)
        : $self->XMapWindow ($self->parent);
   }


   1
}

sub on_destroy {
   my ($self) = @_;

   $self->XUngrabKey ($self->XKeysymToKeycode ($self->{keysym}), 0, $self->DefaultRootWindow)
      if $self->{keysym};

   ()
}

