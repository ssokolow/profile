#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Simple helper to remind of impending bedtime"""

from __future__ import (absolute_import, division, print_function,
                        with_statement, unicode_literals)

__author__ = "Stephan Sokolow (deitarion/SSokolow)"
__appname__ = "remind_bedtime"
__version__ = "0.1"
__license__ = "MIT"

NOTIFICATIONS = [
    (-3, 0, '3 hours to bedtime'),
    (-3, 30, '2½ hours to bedtime'),
    (-2, 0, '2 hours to bedtime'),
    (-2, 30, '1½ hours to bedtime'),
    (-1, 0, '1 hour to bedtime'),
    (-1, 15, '45 minutes to bedtime'),
    (-1, 30, '30 minutes to bedtime'),
    (-1, 45, '15 minutes to bedtime'),
    (0, 0, 'Start preparing for bed'),
    (0, 15, '15 minutes left to prepare for bed'),
    (0, 30, 'Get into bed'),
    (0, 45, '15 minutes overdue for bed'),
    (1, 0, 'You should be asleep now'),
    (1, 30, '½ hour overdue for being asleep'),
    (2, 0, '1 hour overdue for being asleep'),
    (2, 30, '1½ hour overdue for being asleep'),
    (3, 0, '2 hours overdue for being asleep'),
    (3, 30, '2½ hours overdue for being asleep'),
    (4, 0, '3 hours overdue for being asleep'),
    (4, 30, '3½ hours overdue for being asleep'),
    (5, 0, '4 hours overdue for being asleep'),
    (5, 30, '4½ hours overdue for being asleep'),
    (6, 0, '5 hours overdue for being asleep')
]
NOTIFICATIONS.sort()  # Guard against human error

import logging, subprocess, time
import dbus.exceptions
import schedule
import notify2 as notify

log = logging.getLogger(__name__)

def notifications_for(bedtime):
    """Resolve NOTIFICATIONS into a concrete set of times.

    Returns a (time_str, msg, after_bedtime) tuple.
    """
    results = []
    for notification in sorted(NOTIFICATIONS):
        hours = (bedtime + notification[0]) % 24
        after_bedtime = notification[:2] > (0, 0)

        results.append(('{:d}:{:02d}'.format(hours, notification[1]),
             notification[2], after_bedtime))
    return results

class NotificationWrapper(object):
    """Simple wrapper around desired notifications to keep code clean"""
    def __init__(self, silent=False):
        self.silent = silent

        self.notification = notify.Notification(
            'remind_bedtime bug!', icon='appointment')
        self.notification.set_timeout(notify.EXPIRES_NEVER)
        self.notification.set_urgency(notify.URGENCY_CRITICAL)
        self.notification.set_hint('transient', False)

    def notify(self, msg, silent):
        """Display all requested notifications"""
        self.notification(msg)
        self.osd(msg)
        if not silent:
            self.say(msg)

    def notification(msg):
        """Display the message using a system notification"""
        self.notification.update(msg)
        try:
            self.notification.show()
        except dbus.exceptions.DBusException as err:
            log.critical("D-Bus Error: %s", err)
            if not silent:
                self.say("D-Bus Error")


    @staticmethod
    def osd(msg):
        """Display the message using aosd_cat"""
        proc = subprocess.Popen([
            "aosd_cat", "-p", "4", "-R", "white", "-B", '#80A0FF',
            '-b', '127', '-d', '12', '--font=Bitstream Vera Sans Bold 36',
            '--fade-in=1000', '--fade-out=1000'
        ], stdin=subprocess.PIPE)
        proc.stdin.write(msg.encode('utf-8'))
        proc.stdin.close()

    def say(self, msg):
        """Say the message using festival TTS if self.silent is False."""
        if self.silent:
            return

        tts_msg = (msg.replace(u'½', u' and a half')).encode('utf-8')
        proc = subprocess.Popen(["festival", "--tts"],
                             stdin=subprocess.PIPE)
        proc.stdin.write(tts_msg)
        proc.stdin.close()

def main():
    """The main entry point, compatible with setuptools entry points."""
    # If we're running on Python 2, take responsibility for preventing
    # output from causing UnicodeEncodeErrors. (Done here so it should only
    # happen when not being imported by some other program.)
    import sys
    if sys.version_info.major < 3:
        reload(sys)
        sys.setdefaultencoding('utf-8')  # pylint: disable=no-member

    from argparse import ArgumentParser, RawTextHelpFormatter
    parser = ArgumentParser(formatter_class=RawTextHelpFormatter,
            description=__doc__.replace('\r\n', '\n').split('\n--snip--\n')[0])
    parser.add_argument('--version', action='version',
            version="%%(prog)s v%s" % __version__)
    parser.add_argument('-v', '--verbose', action="count",
        default=2, help="Increase the verbosity. Use twice for extra effect")
    parser.add_argument('-q', '--quiet', action="count",
        default=0, help="Decrease the verbosity. Use twice for extra effect")
    parser.add_argument('--silent', action="store_true", default=False,
        help="Don't attempt to use text-to-speech on the message.")
    parser.add_argument('bedtime', type=int, default=21, nargs='?',
        help="The target bedtime as positive 'hour' integer from 0 to 23 "
             "(default: %(default)s)")

    args = parser.parse_args()

    # Set up clean logging to stderr
    log_levels = [logging.CRITICAL, logging.ERROR, logging.WARNING,
                  logging.INFO, logging.DEBUG]
    args.verbose = min(args.verbose - args.quiet, len(log_levels) - 1)
    args.verbose = max(args.verbose, 0)
    logging.basicConfig(level=log_levels[args.verbose],
                        format='%(levelname)s: %(message)s')

    # Initialize the notification which will be reused to avoid stacking up
    notify.init('remind_bedtime')
    notifier = NotificationWrapper()

    # Register all of the notifications in the scheduler
    log.info("Setting up notifications for a %d:00 bedtime", args.bedtime)
    for time_str, msg, silent in notifications_for(args.bedtime):
        schedule.every().day.at(time_str).do(
            notifier.notify, msg, args.silent or silent)

    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    main()

# vim: set sw=4 sts=4 expandtab :
