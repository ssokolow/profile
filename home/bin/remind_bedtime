#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Simple helper to remind of impending bedtime"""

from __future__ import (absolute_import, division, print_function,
                        with_statement, unicode_literals)

__author__ = "Stephan Sokolow (deitarion/SSokolow)"
__appname__ = "remind_bedtime"
__version__ = "0.1"
__license__ = "MIT"

# TODO:
# - Randomize the style of notifications to also say things like "You already
#   will sleep until <time> if you go to sleep now.

IDLE_THRESHOLD = 60 * 5  # 5 minutes

FOOD_MESSAGES = [
    # "Dinner?",
    "Make Food",
    # "Feeling Hungry?",
    # "Supper?",
    # "Are you hungry?",
    # "Have you eaten?",
    # "Did you eat?",
    # "Is food ready?",
    # "Is food made?",
    # "Have you had dinner?",
    # "Have you had supper?",
    # "What about food?",
    # "What about supper?",
    # "What about dinner?",
]

TEETH_MESSAGES = [
    "Brush teeth"
    # "Are your teeth brushed?",
    # "Did you brush your teeth?",
    # "Have you brushed your teeth?",
    # "Have you brushed?",
    # "How are your teeth?",
    # "How's your breath?",
]

BED_MESSAGES = [
    "Prepare for bed",
    # "Procrastinating your bedtime plans again?",
    # "How many times have you ignored bedtime now?",
    # "How many days have you gone to bed late now?",
    # "Will you ignore your bedtime plans tonight too?",
    # "What will you think of your behaviour in the morning?",
    # "You said \"I can stay up longer\" last time too",
    # "You said \"Just one more thing\" last time too",
    # "You said \"Just one more chapter\" last time too",
    # "You're sleepier than you think",
    # "You're more tired than you think",
    # "Don't overestimate your wakefulness",
    # "Sleepy? It'll be there tomorrow.",
    # "Dozy? It'll be there tomorrow.",
    # "If you lie down, you'll feel sleepy, remember?",
    # "Don't jet-lag yourself.",
    # "Think of all the things you could do if you weren't jet-lagged.",
    # "Adjusting your sleep cycle takes time.",
    # "No harm if you lie down and you really can't sleep.",
    # "Falling asleep to a video you've never seen hasn't hurt before",
]

NOTIFICATIONS = [
    (-4, 0, '{timestr} {food_reminder}'),
    (-4, 30, '{timestr}'),
    (-3, 0, '{timestr} Eat food'),
    (-3, 30, '{timestr}'),
    (-2, 0, '{timestr} {teeth_reminder}'),
    (-2, 15, '{timestr}'),
    (-2, 30, '{timestr} {bed_reminder}'),
    (-2, 45, '{timestr}'),
    (-1, 0, '{timestr} Bedtime.'),
    (-1, 15, '15 minutes left to prepare for bed'),
    (-1, 30, 'Get into bed'),
    (-1, 45, '15 minutes overdue for bed'),
    (0, 0, 'You should be asleep now'),
    (0, 30, '½ hour overdue for bed'),
    (1, 0, '1 hour overdue for bed'),
    (1, 30, '1½ hours overdue for bed'),
    (2, 0, '2 hours overdue for bed'),
    (2, 30, '2½ hours overdue for bed'),
    (3, 0, '3 hours overdue for bed'),
    (3, 30, '3½ hours overdue for bed'),
    (4, 0, '4 hours overdue for bed'),
    (4, 30, '4½ hours overdue for bed'),
    (5, 0, '5 hours overdue for bed')
    # TODO: Split out {bed_reminder} so the notifications can have a title/text
    #       distinction for proper word-wrapping.
]
NOTIFICATIONS.sort()  # Guard against human error

import logging, random, subprocess, time  # nosec
import dbus.exceptions
import schedule
import notify2 as notify

import xcffib, xcffib.xproto
import xcffib.screensaver

log = logging.getLogger(__name__)

conn = xcffib.connect()
setup = conn.get_setup()
ss_conn = conn(xcffib.screensaver.key)


def get_idle_secs():
    """Query how long since user input was seen from X11."""
    try:
        # (Don't use "while True" in case the xcb "NULL when no more"
        #  behaviour occasionally happens)
        while conn.poll_for_event():
            pass
    except IOError:
        # In testing, IOError is raised when no events are available.
        pass

    idle_query = ss_conn.QueryInfo(setup.roots[0].root)
    idle_secs = idle_query.reply().ms_since_user_input / 1000.0
    return idle_secs


def notifications_for(bedtime):
    """Resolve NOTIFICATIONS into a concrete set of times.

    Returns a (time_str, msg, after_bedtime) tuple.
    """
    results = []
    for notification in sorted(NOTIFICATIONS):
        hours = (bedtime + notification[0]) % 24
        after_bedtime = notification[:2] > (0, 0)

        results.append(('{:d}:{:02d}'.format(hours, notification[1]),
             notification[2], after_bedtime))
    return results


class NotificationWrapper(object):
    """Simple wrapper around desired notifications to keep code clean"""
    def __init__(self, silent=False):
        self.silent = silent
        self._init_notification()

    def _init_notification(self):
        """Initialize the D-Bus notification object

        (Split out so it can be re-called on D-Bus error)
        """
        self.notification = notify.Notification(
            'remind_bedtime bug!', icon='appointment')
        self.notification.set_timeout(notify.EXPIRES_NEVER)
        self.notification.set_urgency(notify.URGENCY_CRITICAL)
        self.notification.set_hint('transient', False)

    def notify(self, msg, silent):
        """Display all requested notifications"""
        timestr = time.strftime('%I:%M...')

        msg = msg.format(
            timestr=timestr,
            food_reminder=random.choice(FOOD_MESSAGES),  # nosec
            teeth_reminder=random.choice(TEETH_MESSAGES),  # nosec
            bed_reminder=random.choice(BED_MESSAGES))  # nosec

        self.show_notification(msg.rstrip('.'))
        self.show_osd(msg.rstrip('.'))

        idle_secs = IDLE_THRESHOLD + 1
        try:
            idle_secs = get_idle_secs()
        except Exception:
            pass  # nosec

        if not silent or idle_secs < IDLE_THRESHOLD:
            self.say(msg)

    def show_notification(self, msg, retried=False):
        """Display the message using a system notification"""
        self.notification.update(msg)
        try:
            self.notification.show()
        except dbus.exceptions.DBusException as err:
            try:
                self._init_notification()
                self.notification.update(msg)
                self.notification.show()
            except dbus.exceptions.DBusException as err:
                log.critical("D-Bus Error: %s", err)

    @staticmethod
    def show_osd(msg):
        """Display the message using aosd_cat"""
        proc = subprocess.Popen([  # nosec
            "aosd_cat", "-p", "4", "-R", "white", "-B", '#80A0FF',
            '-b', '127', '-d', '12', '--font=Bitstream Vera Sans Bold 36',
            '--fade-in=1000', '--fade-out=1000'
        ], stdin=subprocess.PIPE)
        proc.stdin.write(msg.encode('utf-8'))
        proc.stdin.close()

    def say(self, msg):
        """Say the message using festival TTS if self.silent is False."""
        if self.silent:
            return

        tts_msg = (msg.replace(u'½', u' and a half')
                      .replace(u' AM', ' A.M.')
                      .replace(u' PM', ' P.M.')).lstrip()
        if tts_msg.startswith('and a half'):
            tts_msg = tts_msg[6:]

        tts_msg = tts_msg.encode('utf-8')

        proc = subprocess.Popen(["festival", "--tts"],  # nosec
                             stdin=subprocess.PIPE)
        proc.stdin.write(tts_msg)
        proc.stdin.close()


def main():
    """The main entry point, compatible with setuptools entry points."""
    # If we're running on Python 2, take responsibility for preventing
    # output from causing UnicodeEncodeErrors. (Done here so it should only
    # happen when not being imported by some other program.)
    import sys
    if sys.version_info.major < 3:
        reload(sys)
        sys.setdefaultencoding('utf-8')  # pylint: disable=no-member

    from argparse import ArgumentParser, RawTextHelpFormatter
    parser = ArgumentParser(formatter_class=RawTextHelpFormatter,
            description=__doc__.replace('\r\n', '\n').split('\n--snip--\n')[0])
    parser.add_argument('--version', action='version',
            version="%%(prog)s v%s" % __version__)
    parser.add_argument('-v', '--verbose', action="count",
        default=2, help="Increase the verbosity. Use twice for extra effect")
    parser.add_argument('-q', '--quiet', action="count",
        default=0, help="Decrease the verbosity. Use twice for extra effect")
    parser.add_argument('--silent', action="store_true", default=False,
        help="Don't attempt to use text-to-speech on the message.")
    parser.add_argument('bedtime', type=int, default=21, nargs='?',
        help="The target bedtime as positive 'hour' integer from 0 to 23 "
             "(default: %(default)s)")

    args = parser.parse_args()

    # Set up clean logging to stderr
    log_levels = [logging.CRITICAL, logging.ERROR, logging.WARNING,
                  logging.INFO, logging.DEBUG]
    args.verbose = min(args.verbose - args.quiet, len(log_levels) - 1)
    args.verbose = max(args.verbose, 0)
    logging.basicConfig(level=log_levels[args.verbose],
                        format='%(levelname)s: %(message)s')

    # Initialize the notification which will be reused to avoid stacking up
    notify.init('remind_bedtime')
    notifier = NotificationWrapper()

    # Register all of the notifications in the scheduler
    log.info("Setting up notifications for a %d:00 bedtime", args.bedtime)
    for time_str, msg, silent in notifications_for(args.bedtime):
        schedule.every().day.at(time_str).do(
            notifier.notify, msg, args.silent or silent)

    notifier.notify("Bedtime notifier started", silent=True)
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    main()

# vim: set sw=4 sts=4 expandtab :
