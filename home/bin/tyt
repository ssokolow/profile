#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Simple script to streamline my typical use of youtube-dl with
The Young Turks.
"""

# Prevent Python 2.x PyLint from complaining if run on this
from __future__ import (absolute_import, division, print_function,
                        with_statement, unicode_literals)

__author__ = "Stephan Sokolow (deitarion/SSokolow)"
__appname__ = "TYT youtube-dl streamliner"
__version__ = "0.2pre0"
__license__ = "MIT"

import logging, random, time
log = logging.getLogger(__name__)

import os, shutil, subprocess, tempfile  # nosec

STATE_FILE = os.path.expanduser('~/.cache/tyt_seen.log')

YT_CHANNEL = 'https://www.youtube.com/user/TheYoungTurks/videos'

TARGET_DIR = os.path.expanduser('~/Desktop/pandora')
DOWNLOADER_CMD = ['youtube-dl',
    '-f', '44/35/43/18/34/(bestvideo+bestaudio/best)[height<=480]',
    '--ignore-errors',
    '--download-archive', STATE_FILE,
    '--playlist-end', '28',
    YT_CHANNEL]
OTHER_DEST = time.strftime("/srv/inbound/TYT - %A %Y-%m-%d")

THUMBDRIVE_PATHS = (
    '/media/ssokolow/16GB_Flash',
    '/media/ssokolow/Pandora64GB'
)

SELF_DIR = os.path.abspath(os.path.split(__file__)[0])
NOTIFY_ICON = os.path.join(SELF_DIR, 'tyt_logo.png')
NOTIFY_MSG = 'Young Turks videos downloaded'
NOTIFY_CMD = ['notify-send', '--expire-time=0', '-i', NOTIFY_ICON]


class BadTargetError(Exception):
    """Raised when the target directory is unsuitable."""


class BadDeviceError(Exception):
    """Raised when a failure occurs in resolving or ejecting a device."""

# }}}
# {{{ Removable Media Control


def mountpoint_to_devnode(path):
    """Given a path, walk up to the mountpoint, then resolve to a dev node.

    Returns None on failure.
    """
    while not os.path.ismount(path):
        path, _ = os.path.split(path)
    path = os.path.normpath(os.path.normcase(path))

    with open('/proc/mounts') as fobj:
        for line in fobj:
            devnode, mountpoint, _ = line.split(None, 2)

            if not devnode.startswith('/'):
                continue

            mountpoint = os.path.normpath(os.path.normcase(mountpoint))
            if mountpoint == path:
                return devnode
    return BadDeviceError("Couldn't find device node for given path")


def unmount_and_eject(devnode):
    """Given a device node for a mounted partition, unmount it and
       eject the associated device."""
    try:
        log.info("Unmounting %s", devnode)
        subprocess.check_call(['udisks', '--unmount', devnode])  # nosec
    except subprocess.CalledProcessError:
        raise BadDeviceError("udisks failed while unmounting %s" % devnode)

    try:
        # FIXME: How do I properly find the non-partition device node?
        devnode = devnode.strip('1234567890')
        log.info("Ejecting %s", devnode)
        subprocess.check_call(['udisks', '--eject', devnode])  # nosec
    except subprocess.CalledProcessError:
        raise BadDeviceError("udisks failed while ejecting %s" % devnode)

# {{{ Getting the Young Turks Feed


def get_videos(quiet=False, target_dir='.', cron_mode=False):
    """Download up to 28 newest Young Turks videos"""
    # Set the target directory for youtube-dl and the source for copying
    temp_dir = tempfile.mkdtemp(prefix='tyt-', dir=target_dir)
    old_cwd = os.getcwd()
    os.chdir(temp_dir)

    # Ensure youtube-dl is up to date
    with open(os.devnull, 'w') as devnull:
        subprocess.call(['youtube-dl', '-U'],  # nosec
                    stdout=devnull, stderr=devnull)

    try:
        # Retrieve any of those videos we haven't seen before
        dld_cmd = DOWNLOADER_CMD
        if quiet:
            dld_cmd.append('-q')
        subprocess.check_call(dld_cmd)  # nosec

        # Send the files to other dest and merge them into my target directory
        if not os.path.exists(OTHER_DEST):
            os.makedirs(OTHER_DEST)
            os.chmod(OTHER_DEST, 0o777)  # nosec
        for fname in os.listdir(temp_dir):
            src_fpath = os.path.join(temp_dir, fname)
            for dest_fpath in (os.path.join(x, fname) for x
                            in (target_dir, OTHER_DEST)):
                shutil.copy(src_fpath, dest_fpath)
                os.chmod(dest_fpath, 0o666)  # nosec
            os.remove(src_fpath)
        assert len(os.listdir(temp_dir)) == 0
        os.rmdir(temp_dir)

        # If the thumbdrive is available and not cron mode...
        details = ''
        for path in THUMBDRIVE_PATHS:
            if os.path.exists(path) and not cron_mode:
                log.debug("Calling prepare_thumbdrive")
                details = prepare_thumbdrive(path) or ''
                break
    finally:
        os.chdir(old_cwd)

    return details


def prepare_thumbdrive(tgt_path):
    """Copy videos to the given path and then eject the device"""
    # Copy any new videos over
    for fname in sorted(x for x in os.listdir('.')
            if os.path.splitext(x)[1].lower() in ('.webm', '.mp4', '.edl')):
        if os.path.isdir(fname):
            continue

        if not os.path.exists(os.path.join(tgt_path, fname)):
            log.info("Copying %s to thumbdrive", fname)
            shutil.copy(fname, tgt_path)

    # Try to eject the thumbdrive
    try:
        dev = mountpoint_to_devnode(tgt_path)
        unmount_and_eject(dev)
    except (BadDeviceError, OSError) as err:
        log.error(str(err))
        return '...could not eject the thumbdrive'
    else:
        return 'You may now remove the thumbdrive'


def main():
    """The main entry point, compatible with setuptools entry points."""
    # pylint: disable=bad-continuation
    from argparse import ArgumentParser
    parser = ArgumentParser(description=__doc__)
    parser.add_argument('--version', action='version',
        version="%%(prog)s v%s" % __version__)
    parser.add_argument('-v', '--verbose', action="count",
        default=3, help="Increase the verbosity. Use twice for extra effect.")
    parser.add_argument('-q', '--quiet', action="count",
        default=0, help="Decrease the verbosity. Use twice for extra effect.")
    parser.add_argument('-t', '--target', action="store", dest="target_dir",
        default=TARGET_DIR, help="Set target directory (Default: %%default)")
    parser.add_argument('--cron', action="store_true", dest="cron_mode",
        default=False, help="Fully non-interactive operation sans X11")

    args = parser.parse_args()

    # Adjust default noise level to only show warnings or worse in cron
    if args.cron_mode:
        args.quiet = max(args.quiet, 1)

    # Set up clean logging to stderr
    log_levels = [logging.CRITICAL, logging.ERROR, logging.WARNING,
              logging.INFO, logging.DEBUG]
    args.verbose = min(args.verbose - args.quiet, len(log_levels) - 1)
    args.verbose = max(args.verbose, 0)
    logging.basicConfig(level=log_levels[args.verbose],
                format='%(levelname)s: %(message)s')

    # Random wait to disguise from possible bot catching algorithms
    if args.cron_mode:
        os.nice(19)
        wait = random.randrange(0, 60 * 15)  # nosec
        log.info("Waiting a randomly-chosen %s seconds in case of bot "
                 "catchers", wait)
        time.sleep(wait)

    if not os.path.exists(args.target_dir):
        raise BadTargetError("Target directory does not exist")
    if not os.access(args.target_dir, os.W_OK):
        # Reminder: This isn't the safety check. It's the friendly message.
        raise BadTargetError("Target directory is not writable")

    details = get_videos(args.verbose < 3, args.target_dir, args.cron_mode)

    # Display notification if not cron mode
    if not args.cron_mode:
        if len(os.listdir(OTHER_DEST)) == 0:
            os.rmdir(OTHER_DEST)
        try:
            notify_argv = NOTIFY_CMD[:] + [NOTIFY_MSG, details]
            subprocess.call(notify_argv)
        except OSError:
            logging.error("Could not call subprocess: %r", notify_argv)

if __name__ == '__main__':
    main()

# vim: set sw=4 sts=4 expandtab :
