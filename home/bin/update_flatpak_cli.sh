#!/bin/bash
# Flatpak CLI Shortcut Proof of Concept
# Copyright 2021-2022 Stephan Sokolow (deitarion/SSokolow)
#
# License: MIT
#
# Known shortcomings in this quick and dirty PoC:
# * Assumes command name collisions will never happen
#   (A proper implementation would need to prompt the user to resolve conflicts
#   if encountered instead of just applying "last processed wins" behaviour.)
# * In order to support non-local URL arguments to Flatpak'd browsers, use of
#   --file-forwarding assumes all installed programs will accept file:// URLs.
#   (A proper solution would parse the .desktop files to identify what kinds of
#   arguments the commands want, but I have yet to run into something I want to
#   invoke from the command-line which *doesn't* accept file:// URLs... I'm
#   guessing things like GTK's GIO and Qt's I/O classes just accept file://
#   URLs as a valid form of "local path".)
# * Just uses `grep command= | cut -d= -f2` to "parse" the INI-style output
#   of `flatpak info -m`
#   (A proper implementation needs to make sure it's from the right section of
#   the file to ensure there's no risk of multiple lines matching.)
# * Uses the sledgehammer approach of just removing all non-folders from the
#   target directory before generating new launchers to clear out stale entries.
#   (A proper solution would keep track of which ones it created and would also
#   look for more performant alternatives to spawning a `flatpak info -m` for
#   each application, which limits performance to about 13 applications per
#   second.)
# * Doesn't solve the problem of flatpaks still not installing manpages

# Add this to the end of your $PATH
BIN_DIR=~/.local/bin/flatpak

# Remappings for flatpak packages that use less-than-ideal command names
declare -A CMD_REMAPPINGS
CMD_REMAPPINGS=(
    [BasiliskII]='basilikii'
    ["com.github.tchx84.Flatseal"]='flatseal'
    [Fritzing]='fritzing'
    [scummvm_wrapper]='scummvm'
    [PPSSPPSDL]='ppsspp'
    [SweetHome3D]='sweethome3d'
)

# Remove any stale launch scripts
rm -f "$BIN_DIR"/*
mkdir -p "$BIN_DIR"

for X in $(flatpak list --columns=ref); do
    echo "Querying $X..."
    app_command="$(flatpak info -m "$X" | grep command= | cut -d= -f2)"
    if [ -n "$app_command" ]; then
        cmd_path="$BIN_DIR"/"${CMD_REMAPPINGS["${app_command}"]:-$app_command}"

        # Use bash for the wrapper script because I need to iterate an array
        # and conditionally rewrite arguments and the Python interpreter is an
        # order of magnitude slower to start.
        #
        # shellcheck disable=SC2016
        printf '#!/bin/bash\n# AUTOGENERATED FILE! DO NOT EDIT!\n\n# Unset LD_PRELOAD to silence errors about gtk-nocsd being missing from the Flatpak runtime\nunset LD_PRELOAD\n\n# Make arguments that are existing paths absolute\n# (Necessary to make "assume file:// URLs are OK" forwarding work reliably)\ndeclare -a args\nfor arg in "$@"; do\n    if [ -a "$arg" ]; then\n        args+=("$(readlink -f "$arg")")\n    else\n        args+=("$arg")\n    fi\ndone\n\n# Use file forwarding to make paths Just Workâ„¢\nexec flatpak run --file-forwarding "%s" @@u "${args[@]}" @@' "$X" >"$cmd_path"
        chmod +x "$cmd_path"
    fi
done
