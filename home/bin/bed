#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Record-keeping helper for smarter bedtime playback practices.

Dependencies:
- pytimeparse
- A version of jaseg/python-mpv new enough to have register_key_binding or
  patched to support it.

TODO: Consider a Rust-based implementation for compile-time strictness:
      - https://docs.rs/mpv/0.2.3/mpv/

TODO: Display an error message if none of the given paths were valid.
"""

from __future__ import (absolute_import, division, print_function,
                        with_statement, unicode_literals)

__author__ = "Stephan Sokolow (deitarion/SSokolow)"
__appname__ = "Bedtime Player"
__version__ = "0.1"
__license__ = "MIT"

import os

MPV_CONFIG = {
    'x11-name': 'bedtime-player',
    'screen': 0,
    'fs-screen': 0,
    'ontop': True,
    'border': False,
    'autofit': '100%',
    'fullscreen': True,
    'osd_level': 3,
    'stop_screensaver': False,
    'input-default-bindings': True,
    'input-vo-keyboard': True,
    'input-conf': os.path.expanduser('~/.mpv/input.conf'),
}

import itertools, logging, random, sys, threading, time

from pytimeparse import parse as parse_duration
from mpv import MPV, MpvEventEndFile  # pylint: disable=import-error

import dbus
from dbus.service import BusName, Object, method
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib
DBusGMainLoop(set_as_default=True)

log = logging.getLogger(__name__)

# --== Core Components (playback) ==--


class DBusObject(Object):
    """D-Bus endpoint definition"""
    def __init__(self, bus, player):
        # type: (SessionBus, CommandRegistry, WindowManager) -> None
        """
        @param bus: The connection on which to export this object.
            See the C{dbus.service.Object} documentation for details.
        """
        Object.__init__(self, bus, '/com/ssokolow/bin/bed')
        self.player = player

    @method(dbus_interface='com.ssokolow.bin.bed',
            in_signature='', out_signature='')
    def toggle_pause(self):
        """Toggle the paused state of the currently playing video"""
        self.player.mpv.pause = not self.player.mpv.pause

    @method(dbus_interface='com.ssokolow.bin.bed',
            in_signature='i', out_signature='')
    def seek(self, increment):
        """Seek relatively within the current video"""
        self.player.mpv.seek(increment)

    @method(dbus_interface='com.ssokolow.bin.bed',
            in_signature='', out_signature='')
    def skip(self):
        """Skip the current video without recording it in the log"""
        self.player.mpv.playlist_next('force')

    @method(dbus_interface='com.ssokolow.bin.bed',
            in_signature='', out_signature='')
    def quit(self):
        """Exit MPV without recording the current video in the log"""
        self.player.stop()
        self.player.mpv.terminate()


class DBusThread(threading.Thread):
    """Thread to allow remote control via D-Bus"""
    def __init__(self, player):
        super(DBusThread, self).__init__()
        self.daemon = True

        self.player = player
        self.mainloop = GLib.MainLoop()

    def run(self):
        self.session_bus = dbus.SessionBus()

        self.dbus_name = BusName("com.ssokolow.bin.bed", self.session_bus)
        self.dbus_obj = DBusObject(self.session_bus, self.player)

        try:
            self.mainloop.run()
        except KeyboardInterrupt:
            print("Forcing an exit...")
            os._exit(0)


class Player(object):
    """Wrapper to extend libmpv with play logging and other desired features"""
    mpv = None
    log_fobj = False
    playback_started = None

    def __init__(self):
        """Set up our tweaked MPV config and attach event and key handlers"""
        config = self.parse_config()
        config.update(MPV_CONFIG)

        # TODO: Find a way to recover from asking for a lavfi config that works
        #       on mpv but not libmpv due to build differences.
        if config.get('af').startswith('lavfi='):
            del config['af']

        self.mpv = MPV(log_handler=self.cb_log, **config)

        # pylint: disable=unnecessary-lambda
        # (The lambdas are required because python-mpv can't hang a custom
        #  attribute off a bound method and dies as a result)
        self.mpv.register_key_binding('q',
            lambda *args: self.cb_quit(args[0], args[1]))
        self.mpv.register_key_binding('Ctrl+c',
            lambda *args: self.cb_skip(args[0], args[1]))
        self.mpv.event_callback('end-file')(self.cb_end_file)

    def play(self, playlist, log_fobj=None, video='auto', loop=False):
        """Play a sequence of files and log them unless the user exits"""
        self.log_fobj = log_fobj

        # Use the MPV playlist feature so we don't reset the window position
        # after each file
        self.mpv.playlist.clear()
        for path in playlist:
            path = os.path.abspath(path)

            # Transparently support EDLs for cutting out ads
            # https://github.com/mpv-player/mpv/blob/master/DOCS/edl-mpv.rst
            edl_path = os.path.splitext(path)[0] + '.mpv.edl'
            if os.path.exists(edl_path):
                path = edl_path

            self.mpv.playlist_append(path)

        # Reset playback parameters and start playing
        self.mpv.loop_file = loop
        self.mpv.playlist_pos = 0
        self.mpv.video = video
        self.mpv.pause = False
        self.playback_started = time.time()

    def stop(self):
        """Helper for all code which wants to stop playback"""
        self.mpv.video = False
        self.mpv.pause = True

    def cb_end_file(self, event):
        """Called by libmpv whenever a file finishes playing"""

        # Get the previous entry or the last if there is no current entry
        just_finished = self.mpv.playlist[
            (self.mpv.playlist_pos or len(self.mpv.playlist)) - 1]['filename']

        # TODO: Figure out how to detect playback init failure
        if (self.log_fobj and
          event['event']['reason'] == MpvEventEndFile.EOF):
            # playback ended naturally and should be noted
            self.log_fobj.write('%f\t%s\n' % (time.time(), just_finished))
            self.log_fobj.flush()
            log.info("Playback logged.")

    @staticmethod
    def cb_log(loglevel, component, message):
        """Called by libmpv to log messages to console"""
        # TODO: How do I plumb this into the logging module properly?
        print('[{}] {}: {}'.format(loglevel, component, message))

    def cb_skip(self, state, key):
        """Called when Ctrl+C is pressed to skip to the next file"""
        if state == 'd-':
            self.mpv.playlist_next('force')

    def cb_quit(self, state, key):
        """Called when the Q key is pressed to exit w/o logging current file"""
        if state == 'd-':
            self.stop()
            self.mpv.quit()

    @staticmethod
    def parse_config(path=os.path.expanduser(b"~/.mpv/config")):
        """Helper to parse ~/.mpv/config

        NOTE: Does NOT handle quoting to allow # for other purposes.
        """
        result = {}
        with open(path) as fobj:
            for line in fobj:
                line = line.split('#')[0].strip()
                if not line:
                    continue
                if line.startswith('[') and line.endswith(']'):
                    break

                item = line.split('=', 1)
                result[item[0]] = item[1]

        return result

# --== Helper Functions (non-playback) ==--


def walk_args(args):
    """Adapter to recursively resolve directory paths to file paths."""
    for root in args:
        root = os.path.abspath(root)
        if os.path.isfile(root):
            yield root
        elif os.path.isdir(root):
            for path, dirs, files in os.walk(root):
                dirs.sort()
                for fname in sorted(files):
                    yield os.path.join(path, fname)


def load_history(data_path, has_dates=True):
    """Load the contents of the playback history"""
    with open(data_path, 'r') as fobj:
        data = fobj.read()

    # Parse the data store
    data = data.strip().split('\n')
    if has_dates:
        data = [line.strip().split(None, 1) for line in data]
    data = [line for line in data if line]

    return data


def recency_sort(files, records, randomize=None):
    """Sort `files` by recency according to `records`.

    If `randomize` is given, treat it as time window (in days) within which to
    shuffle entries.
    """
    # Load as a filename->newest_timestamp dict
    data = {pair[1]: pair[0] for pair in records}

    if randomize is not None:
        # TODO: Make sure this actually keys filenames based on the timestamp,
        #       truncated to the nearest args.randomize number of days, and a
        #       random value.
        files = sorted(files, key=lambda x: (
            int(float(data.get(x, 0)) / (randomize * 3600 * 24)),
            random.random()
        ))
    else:
        files = sorted(files, key=lambda x: data.get(x, 0))
    return files

# --== Main Routines ==--


def playback_main(files, data_path, time_limit=None, no_log=False):
    player = Player()
    dbus_thread = DBusThread(player)
    time_limit = parse_duration(time_limit or '156w')

    # Play the files
    with open(data_path, 'a') as fobj:
        player.play(playlist=files, log_fobj=(None if no_log else fobj))
        dbus_thread.start()

        while player.mpv.playlist_pos is not None:
            player.mpv.wait_for_playback()

            if time.time() >= player.playback_started + time_limit:
                log.info("Time limit exceeded")
                player.stop()
                return


def main():
    """The main entry point, compatible with setuptools entry points."""
    # If we're running on Python 2, take responsibility for preventing
    # output from causing UnicodeEncodeErrors. (Done here so it should only
    # happen when not being imported by some other program.)
    if sys.version_info.major < 3:
        reload(sys)  # pylint: disable=undefined-variable
        sys.setdefaultencoding('utf-8')  # pylint: disable=no-member

    from argparse import ArgumentParser
    parser = ArgumentParser(
            description=__doc__.replace('\r\n', '\n').split('\n--snip--\n')[0])
    parser.add_argument('--version', action='version',
            version="%%(prog)s v%s" % __version__)
    parser.add_argument('-v', '--verbose', action="count",
        default=3, help="Increase the verbosity.")
    parser.add_argument('-q', '--quiet', action="count",
        default=0, help="Decrease the verbosity. Repeat for extra effect")
    parser.add_argument('--recency', action='store_true',
        default=False, help="Sort by least recently played before playing.")
    parser.add_argument('--randomize', action='store',
        default=None, help="When using --recency, shuffle values played within"
        " DAYS of each other.", metavar="DAYS", type=float)
    parser.add_argument('-p', '--print', action='store_true',
        default=False, help="Just print a list of files. Don't play them.")
    parser.add_argument('-n', '--limit', type=int,
                        help="Limit how many files are played")
    parser.add_argument('-t', '--time-limit', default=None,
                        help="Limit play time to this duration, rounded up to "
                        "the nearest complete file")
    parser.add_argument('--no-log', action="store_true", default=False,
                        help="Don't log the playback of the given files.")
    parser.add_argument('--from-file', action="append",
                        help="Load a list of arguments from the given file.")
    parser.add_argument('files', nargs='*')

    args = parser.parse_args()

    # Set up clean logging to stderr
    log_levels = [logging.CRITICAL, logging.ERROR, logging.WARNING,
                  logging.INFO, logging.DEBUG]
    args.verbose = min(args.verbose - args.quiet, len(log_levels) - 1)
    args.verbose = max(args.verbose, 0)
    logging.basicConfig(level=log_levels[args.verbose],
                        format='%(levelname)s: %(message)s')

    this_dir = os.path.abspath(os.path.dirname(__file__))
    data_path = os.path.join(this_dir, 'bed.records')

    files = args.files
    if args.from_file:
        for path in args.from_file:
            files.extend(load_history(path, has_dates=False))

    # Prepare the files list
    files = walk_args(args.files)
    if args.recency:
        files = recency_sort(files, load_history(data_path), args.randomize)
    if args.limit:
        files = itertools.islice(files, args.limit)

    # TODO: I need some kind of UI that lets me effectively un-mark the ones
    # that played after I fell asleep.

    # If --print, output and exit, else, go to playback_main()
    if args.print:
        print('\n'.join(files))
    else:
        playback_main(files, data_path, args.time_limit, args.no_log)


if __name__ == '__main__':
    main()

# vim: set sw=4 sts=4 expandtab :
